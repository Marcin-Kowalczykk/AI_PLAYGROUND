import 'dotenv/config'
import { askOpenAI } from '../middlewares/askOpenAI/askOpenAi'
import { ChatCompletionMessageParam } from 'openai/resources/chat/completions'
import { sendAnswerToCentralApi } from '../middlewares/sendAnswerToCentralApi/sendAnswerToCentralApi'
import { sendDbQuery } from '../middlewares/sendDbQueryapidb'

export const showTables = async (): Promise<string[] | undefined> => {
  try {
    const response = await sendDbQuery('SHOW TABLES;', 'database')

    const tables = response.reply.map((table: any) => table.Tables_in_banan)

    console.log('SHOW TABLES result:', tables)
    return tables
  } catch (error) {
    console.error('Error in SHOW TABLES:', error)
  }
}

export const showCreateTable = async (tableName: string): Promise<void> => {
  try {
    const response = await sendDbQuery(`SHOW CREATE TABLE ${tableName};`, 'database')

    return response.reply
  } catch (error) {
    console.error(`Error in SHOW CREATE TABLE ${tableName}:`, error)
  }
}

export const generateSQLQueryWithLLM = async (
  createTableUsers: string,
  createTableDatacenters: string,
  usersFromDbTable: any,
  datacentersFromDbTable: any,
): Promise<string> => {
  const systemPrompt =
    'You are an expert SQL query generator. Always generate only SQL query without any other symbols, comments, descriptions or explanations.'

  const userPrompt = `Based on the following table schemas, write a single SQL query that returns the IDs (DC_ID column) of active datacenters that are managed by managers (from the users table) who are currently on vacation (inactive). Return only the raw SQL query text,

    Table schema: users:
    ${createTableUsers}
    Table schema: datacenters:
    ${createTableDatacenters}

    Table data: users:
    ${JSON.stringify(usersFromDbTable)}
    Table data: datacenters:
    ${JSON.stringify(datacentersFromDbTable)}
    
    important: never add similar symbols like ' or " in the SQL query, sql query should be like this: 
    
    <example_response>
    SELECT datacenters.DC_ID FROM datacenters;
    </example_response>`

  const messages: ChatCompletionMessageParam[] = [{ role: 'user', content: userPrompt }]

  const response = await askOpenAI({
    systemPrompt,
    messages,
  })
  const sql = response.answer.trim()

  console.log('SQL generated by LLM:', sql)
  return sql
}

const extractDcIds = (result: { reply: { dc_id: string }[] }): number[] => {
  if (!result?.reply) return []
  return result.reply.map((item) => Number(item.dc_id))
}

export const handleProcessExample13 = async (): Promise<any> => {
  const tables = await showTables()
  const createTableQueries = await Promise.all(
    tables?.includes('users') && tables?.includes('datacenters')
      ? [showCreateTable('users'), showCreateTable('datacenters')]
      : [],
  )

  const createTableUsers = createTableQueries[0]
  const createTableDatacenters = createTableQueries[1]

  console.log('createTableDatacenters: ', createTableDatacenters)

  const usersFromDbTable = await sendDbQuery('SELECT * FROM users;', 'database')
  const datacentersFromDbTable = await sendDbQuery('SELECT * FROM datacenters;', 'database')

  console.log('USERS:', usersFromDbTable)
  console.log('DATACENTERS:', datacentersFromDbTable)

  if (createTableUsers && createTableDatacenters) {
    const SQLquery = await generateSQLQueryWithLLM(
      createTableUsers,
      createTableDatacenters,
      usersFromDbTable,
      datacentersFromDbTable,
    )
    const result = await sendDbQuery(SQLquery, 'database')
    const dcIds = extractDcIds(result)
    console.log('RESULT:', dcIds)

    const centralaResponse = await sendAnswerToCentralApi({
      taskName: 'database',
      answer: dcIds,
    })

    return centralaResponse?.message
  } else {
    console.error('Table schemas are missing!')
  }
}

// handleProcessExample13()
